package fr.atlasworld.network.integration.ptero;

import com.google.gson.JsonElement;
import com.mattmalec.pterodactyl4j.DataType;
import com.mattmalec.pterodactyl4j.EnvironmentValue;
import com.mattmalec.pterodactyl4j.PteroBuilder;
import com.mattmalec.pterodactyl4j.application.entities.*;
import com.mattmalec.pterodactyl4j.application.managers.ServerCreationAction;
import fr.atlasworld.network.AtlasNetwork;
import fr.atlasworld.network.config.EggConfig;
import fr.atlasworld.network.config.PanelConfig;
import fr.atlasworld.network.database.DatabaseManager;

import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

public class PteroManager {
    private final PanelConfig config;
    private final PteroApplication application;
    private final DatabaseManager database;
    private boolean ready;

    public PteroManager(PanelConfig config, DatabaseManager database) {
        this.config = config;
        this.database = database;
        this.application = PteroBuilder.createApplication(this.config.url(), this.config.token());
        this.ready = false;
    }

    public void initialize() {
        CompletableFuture.supplyAsync(() -> {
            this.application.retrieveServers().execute()
                    .forEach(server -> {
                        if (server.getOwnerIdLong() == this.config.userId()) {
                            AtlasNetwork.logger.info("[Panel] Old session server found, deleting '{}'", server.getName());
                            server.getController().delete(false).execute();
                        }
                    });

            return true;
        }).thenAccept(success -> this.ready = success);
    }

    public ServerCreationResult createServer(EggConfig eggConfig, String name) {
        Node node = this.application.retrieveNodeById(eggConfig.resources().node()).execute();
        ApplicationEgg egg = this.application.retrieveEggById(this.application.retrieveNestById(eggConfig.nest()).execute(),
                eggConfig.egg()).execute();
        List<ApplicationAllocation> freeAlloc = node.retrieveAllocations().execute()
                .stream().filter(alloc -> !alloc.isAssigned()).toList();

        if (freeAlloc.size() < eggConfig.resources().allocations()) {
            return new ServerCreationResult(false, "NOT_ENOUGH_ALLOCATIONS_AVAILABLE", null);
        }

        ServerCreationAction creationAction = this.application.createServer()
                .setCPU(eggConfig.resources().cpu())
                .setMemory(eggConfig.resources().memory(), DataType.MB)
                .setSwap(eggConfig.resources().swap(), DataType.MB)
                .setDisk(eggConfig.resources().disk(), DataType.MB)
                .setName(name)
                .setDescription("Server Generated by AtlasNetwork")
                .setOwner(this.application.retrieveUserById(this.config.userId()).execute())
                .startOnCompletion(false)
                .setEgg(egg)
                .setDockerImage(eggConfig.image());

        if (eggConfig.resources().allocations() > 1) {
            for (int i = 0; i < eggConfig.resources().allocations(); i++) {
                creationAction.setAllocation(freeAlloc.get(i));
            }
        } else {
            creationAction.setAllocation(freeAlloc.get(0));
        }

        Set<Map.Entry<String, JsonElement>> properties = eggConfig.variables().entrySet();
        if (!properties.isEmpty()) {
            Map<String, EnvironmentValue<?>> envProps = properties.stream()
                    .collect(Collectors.toMap(
                            Map.Entry::getKey,
                            entry -> EnvironmentValue.of(entry.getValue().getAsString())
                    ));

            creationAction.setEnvironment(envProps);
        }

        return new ServerCreationResult(true, "", creationAction.execute());
    }

    public boolean isReady() {
        return ready;
    }
}
